# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

# Build LLVM on Linux, macOS, and Windows at the commit in `llvm-commit.txt`.
# Create a new release with those builds attached.

name: Build and release

on:
  push:
    branches:
      # The `dev` branch is for fast iteration on infrastructure. It does
      # everything except build LLVM, and the releases it publishes are drafts.
      - dev
      - main

jobs:
  build:
    strategy:
      # Continue other builds if one fails; harmless and useful for testing.
      # The release job will only run if all builds succeed.
      fail-fast: false

      matrix:
        # Prefer older OS versions when available in the hopes that the
        # builds produced will have broader compatibility.
        os: [ubuntu-18.04, macos-10.15, windows-2019]

    defaults:
      run:
        shell: bash  # even on Windows

    name: Build (${{matrix.os}})
    runs-on: ${{matrix.os}}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: get LLVM commit
        id: get_llvm_commit
        run: echo "::set-output name=commit::$(<llvm-commit.txt)"

      - name: checkout llvm-project
        uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          path: llvm-project
          ref: ${{ steps.get_llvm_commit.outputs.commit }}
          fetch-depth: 1

      # Install Ninja and put it on the path. This action handles platform
      # detection and is a lot faster than e.g. `choco install` on Windows.
      - name: install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          version: 1.10.2  # newest when checked in

      # Put MSVC (cl.exe) on PATH. No-op on non-Windows runners.
      - name: set MSVC environment variables
        uses: ilammy/msvc-dev-cmd@v1.5.0

      - name: configure
        run: |
          # Use MSVC on Windows and Clang everywhere else.
          # Using MSVC fixed build errors related to platform headers that were
          # observed when CMake was left to its first choice, MinGW.
          if [[ '${{runner.os}}' == 'Windows' ]]; then
            export CC=cl.exe
            export CXX=cl.exe
          else
            export CC=clang
            export CXX=clang++
          fi

          cmake \
              -G Ninja \
              -B build \
              -C BuildSettings.txt \
              llvm-project/llvm

      - name: add Bazel files
        run: |
          mkdir -p install

          cat <<EOF > install/WORKSPACE.bazel
          workspace(name = "com_github_mmdriley_llvmbuilds")
          EOF

          # Empty BUILD file for now. Clients will use labels to refer to
          # specific files in the package.
          touch install/BUILD.bazel

      - name: build
        run: cmake --build build
        if: github.ref == 'refs/heads/main'

      - name: install
        run: cmake --install build --prefix install
        if: github.ref == 'refs/heads/main'

      - name: package
        # Build a tar and use 7-Zip to compress it with XZ. This can be a lot
        # faster than `tar J` because 7z uses multiple threads.
        run: tar cv -C install . | 7z a -si llvm.tar.xz

      # Print the archive hash to the build log for traceability.
      - name: hash
        run: cmake -E sha256sum llvm.tar.xz

      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          # runner.os is one of "Windows", "Linux", or "macOS"
          name: llvm-${{runner.os}}
          path: llvm.tar.xz

      # Show disk space left after the build. Not currently a problem, but LLVM
      # is big and changing build options might put us over the 14GB we're
      # nominally granted. Real-world allotments seem larger, though.
      #
      # https://docs.github.com/en/actions/reference/specifications-for-github-hosted-runners
      - name: show disk usage
        run: df -h .
    outputs:
      llvm_commit: ${{ steps.get_llvm_commit.outputs.commit }}

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      # When used with no arguments, downloads all artifacts, each into a
      # directory matching the artifact name.
      - name: download artifacts
        uses: actions/download-artifact@v2

      # Give files different names so they don't collide in the release.
      - name: rename and rearrange
        run: |
          mv llvm-Linux/llvm.tar.xz llvm-linux.tar.xz
          mv llvm-macOS/llvm.tar.xz llvm-macos.tar.xz
          mv llvm-Windows/llvm.tar.xz llvm-windows.tar.xz

      - name: hash artifacts
        id: hash_artifacts
        # Use `jq` to encode the `sha256sum` output as a JSON string.
        # We can't use `set-output` to output a multiline string, so instead we
        # output a string with `\n`s in it and JSON-decode it on use.
        run: |
          echo -n '::set-output name=hash_list_json::'
          cmake -E sha256sum llvm-*.tar.xz | jq -Rs .

      # Include LLVM commit from the builder in the release message.
      # Oddly, the output from a matrixed job is returned as a single value --
      # maybe "last write wins" ? -- rather than as a list. This works for us
      # because all job instances output the same value.
      # discussion: https://github.community/t/bug-jobs-output-should-return-a-list-for-a-matrix-job/128626
      #
      # GitHub will turn `owner/repo@SHA` into a link, though not the more
      # general `owner/repo@ref`.
      # ref: https://docs.github.com/en/github/writing-on-github/autolinked-references-and-urls
      - name: create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: r${{ github.run_number }}
          name: build ${{ github.run_number }}
          draft: ${{ github.ref != 'refs/heads/main' }}
          # See `hash_artifacts` step above for why we use `fromJSON`.
          body: |
            llvm/llvm-project@${{ needs.build.outputs.llvm_commit }}

            ```
            ${{ fromJSON(steps.hash_artifacts.outputs.hash_list_json) }}```

            build logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

          # List each OS explicitly so the release will fail if any are missing.
          files: |
            llvm-linux.tar.xz
            llvm-macos.tar.xz
            llvm-windows.tar.xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
